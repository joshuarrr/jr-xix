{"version":3,"sources":["../../src/commands/bundle.js"],"names":["originalConfig","config","staging","debug","process","env","NODE_ENV","REACT_STATIC_ENV","BABEL_ENV","REACT_STATIC_STAGING","REACT_STATIC_DEBUG","console","log","siteRoot","chalk","green","fs","remove","paths","DIST","ASSETS","emptyDir","bundleAnalyzer","Promise","bundle"],"mappings":"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","sourcesContent":["import fs from 'fs-extra'\nimport chalk from 'chalk'\n//\nimport {\n  prepareRoutes,\n  prepareBrowserPlugins,\n  buildProductionBundles,\n  getConfig,\n  extractTemplates,\n  generateTemplates,\n  outputBuildInfo,\n} from '../static'\n\nimport { copyPublicFolder, time, timeEnd } from '../utils'\n\nexport default (async function bundle({\n  config: originalConfig,\n  staging,\n  debug,\n} = {}) {\n  // ensure ENV variables are set\n  if (typeof process.env.NODE_ENV === 'undefined' && !debug) {\n    process.env.NODE_ENV = 'production'\n  }\n  process.env.REACT_STATIC_ENV = 'production'\n  process.env.BABEL_ENV = 'production'\n\n  if (staging) {\n    process.env.REACT_STATIC_STAGING = 'true'\n  }\n  if (debug) {\n    process.env.REACT_STATIC_DEBUG = 'true'\n  }\n\n  // Allow config location to be overriden\n  let config = await getConfig(originalConfig)\n  config.originalConfig = originalConfig\n\n  if (debug) {\n    console.log('DEBUG - Resolved static.config.js:')\n    console.log(config)\n  }\n  console.log('')\n\n  if (!config.siteRoot) {\n    console.log(\n      \"=> Info: No 'siteRoot' is defined in 'static.config.js'. This is suggested for absolute urls and also required to automatically generate a sitemap.xml.\"\n    )\n    console.log('')\n  }\n\n  // Remove the DIST folder\n  console.log('=> Cleaning dist...')\n  time(chalk.green('=> [\\u2713] Dist cleaned'))\n  await fs.remove(config.paths.DIST)\n  timeEnd(chalk.green('=> [\\u2713] Dist cleaned'))\n\n  // Empty ASSETS folder\n  if (config.paths.ASSETS && config.paths.ASSETS !== config.paths.DIST) {\n    console.log('=> Cleaning assets...')\n    time(chalk.green('=> [\\u2713] Assets cleaned'))\n    await fs.emptyDir(config.paths.ASSETS)\n    timeEnd(chalk.green('=> [\\u2713] Assets cleaned'))\n  }\n\n  config = await prepareBrowserPlugins(config)\n  config = await prepareRoutes(config)\n  await extractTemplates(config)\n  await generateTemplates(config)\n\n  console.log('=> Copying public directory...')\n  time(chalk.green('=> [\\u2713] Public directory copied'))\n  copyPublicFolder(config)\n  timeEnd(chalk.green('=> [\\u2713] Public directory copied'))\n\n  // Build static pages and JSON\n  console.log('=> Bundling App...')\n  time(chalk.green('=> [\\u2713] App Bundled'))\n  await buildProductionBundles({ config })\n  timeEnd(chalk.green('=> [\\u2713] App Bundled'))\n\n  await outputBuildInfo(config)\n\n  if (config.bundleAnalyzer) {\n    await new Promise(() => {})\n  }\n\n  return config\n})\n"],"file":"bundle.js"}